package com.farmSystem.Repository.Impl;

import java.util.List;

import com.farmSystem.entity.Equipment;
import com.farmSystem.entity.User;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.PersistenceUnit;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Join;
import jakarta.persistence.criteria.JoinType;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;

public class CustomEquipmentRepository implements com.farmSystem.Repository.CustomEquipmentRepository {
	
	@PersistenceUnit
	private EntityManagerFactory entityManagerFactory;

	@Override
	public List<User> serchEquipment(String category, String location, Double minRate, Double maxRate, String sortField,
			String sortOrder, int pageNumber, int pageSize, double userLng, double userLat, Double radius) {
		
		try(EntityManager entityManager = entityManagerFactory.createEntityManager()){
			
			CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
			
			CriteriaQuery<User> criteriaQuery = criteriaBuilder.createQuery(User.class);
			
			Root<User> root =criteriaQuery.from(User.class);
			
			Join<User,Equipment> join = root.join("owner",JoinType.INNER);
			
			Predicate predicate = criteriaBuilder.conjunction();
			
			if(category != null && !category.isEmpty()) {
				
				predicate = criteriaBuilder.and(predicate,criteriaBuilder
																.equal(root.get("category"),category));
			}
			
			if (location != null && !location.isEmpty()) {

				predicate = hibernateCriteriaBuilder.and(predicate,
						hibernateCriteriaBuilder.like(root.get("location"), "%" + location + "%"));
			}

			if (radius != null) {

				// Expression for distance calculation (in meters)
				Expression<Double> distanceExpr = hibernateCriteriaBuilder.function("ST_Distance_Sphere", Double.class,
						hibernateCriteriaBuilder.function("POINT", Object.class, ownerJoin.get("longitude"),
								ownerJoin.get("latitude")),
						hibernateCriteriaBuilder.function("POINT", Object.class,
								hibernateCriteriaBuilder.literal(userLng), hibernateCriteriaBuilder.literal(userLat)));

				predicate = hibernateCriteriaBuilder.and(predicate,
						hibernateCriteriaBuilder.lessThanOrEqualTo(distanceExpr, radius * 1000));

			}
			if (minRate != null) {

				predicate = hibernateCriteriaBuilder.and(predicate,
						hibernateCriteriaBuilder.greaterThanOrEqualTo(root.get("rentalRate"), minRate));
			}
			if (maxRate != null) {
				predicate = hibernateCriteriaBuilder.and(predicate,
						hibernateCriteriaBuilder.lessThanOrEqualTo(root.get("rentalRate"), maxRate));
			}

			criteriaQuery.select(root).where(predicate);

			// ðŸ”¹ Apply Sorting
			if (sortField != null && !sortField.isEmpty()) {
				if ("DESC".equalsIgnoreCase(sortOrder)) {
					criteriaQuery.orderBy(hibernateCriteriaBuilder.desc(root.get(sortField)));
				} else {
					criteriaQuery.orderBy(hibernateCriteriaBuilder.asc(root.get(sortField)));
				}
			}
		}
	
	}

}
