package com.farmSystem.service.impl;

import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.farmSystem.Repository.BookingsRepository;
import com.farmSystem.Util.UsersUtil;
import com.farmSystem.entity.Bookings;
import com.farmSystem.entity.User;
import com.farmSystem.enums.BookingStatus;
import com.farmSystem.enums.PaymentStatus;
import com.farmSystem.exception.BookingNotFoundException;
import com.farmSystem.exception.RenterNotFoundException;
import com.farmSystem.service.PaymentService;

import jakarta.transaction.Transactional;

@Service
public class PaymentServiceImpl implements PaymentService{
	
	@Autowired
	private BookingsRepository bookingsRepository;
	
	@Autowired
	private UsersUtil usersUtil;
	
	@Value("${Booking.not.found}")
	private String bookingNotFound;
	
	@Transactional
	@Override
	public String initiatePayment(int bookingId) throws BookingNotFoundException, RenterNotFoundException {
		
		Bookings bookings = bookingsRepository.findById(bookingId)
														.orElseThrow(() -> new BookingNotFoundException(String.format(bookingNotFound,bookingId)));
		
		User renter = bookings.getRenter();
		
		if(Objects.isNull(renter)) {
			
			throw new RenterNotFoundException("Renter Not Found with Booking id:"+bookings.getId());
		}
		
		String emailId = usersUtil.getCurrentUserEmail();
		
		if(!renter.getEmailId().equals(emailId)) {
			
			return "Not Authorized to Pay";
		}
		
		
	    if (bookings.getBookingStatus() != BookingStatus.Approved) {
	        return "Booking must be approved by the lender before payment.";
	    }
	    
	    if (bookings.getPaymentStatus() == PaymentStatus.PAID) {
	        return "Payment already completed.";
	    }
	}

}
